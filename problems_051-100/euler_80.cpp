/*
PROBLEM:
  Euler 80
  It is well known that if the square root of a natural number is not an integer, 
  then it is irrational. The decimal expansion of such square roots is infinite 
  without any repeating pattern at all.

  The square root of two is 1.41421356237309504880..., and the digital sum of the 
  first one hundred decimal digits is 475.

  For the first one hundred natural numbers, find the total of the digital sums of 
  the first one hundred decimal digits for all the irrational square roots.


SOLUTION:
  One solution could be to rely on digit-by-digit computation of the squre root (see 
  https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Digit-by-digit_calculation)

  For this problem, I use the GMP library (https://gmplib.org/). To compile and run
  the solution code, you need to install the GMP library first. I locally installed
  it and specified the header and the static library files as follows:

  g++ --std=c++11 -I gmp_install/include  -L gmp_install/lib ./euler_080.cpp -lgmp -lgmpxx

  When building GMP, make sure to specify the C++ build option `--enable-cxx`. For more
  details on the C++ interface, see https://gmplib.org/manual/C_002b_002b-Class-Interface


  The reason that I decided to use GMP was that initially I was computing the digit,
  d, by dividing the remainder by (20 * sqrt * d + d ^2). Since I did not have int
  division in my LargeUInt custom class, I decided to use GMP. As I was coding up the
  solution, however, I thought I would avoid division and instead use a less efficient
  search. So, in the hind sight, I could have used the same LargeUInt class that I used
  for the previous problems.

  I am content with the solution, and do not intend on chaining it. This problem does not
  seem very intriguing after all. Am I missing something?!

  ANSWER: 40886
    1 --> 1
    2 --> 1414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641572
    3 --> 1732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248575
    4 --> 2
    5 --> 2236067977499789696409173668731276235440618359611525724270897245410520925637804899414414408378782274
    6 --> 2449489742783178098197284074705891391965947480656670128432692567250960377457315026539859433104640234
    7 --> 2645751311064590590501615753639260425710259183082450180368334459201068823230283627760392886474543610
    8 --> 2828427124746190097603377448419396157139343750753896146353359475981464956924214077700775068655283145
    9 --> 3
   10 --> 3162277660168379331998893544432718533719555139325216826857504852792594438639238221344248108379300295
   11 --> 3316624790355399849114932736670686683927088545589353597058682146116484642609043846708843399128290650
   12 --> 3464101615137754587054892683011744733885610507620761256111613958903866033817600074162292373514497151
   13 --> 3605551275463989293119221267470495946251296573845246212710453056227166948293010445204619082018490717
   14 --> 3741657386773941385583748732316549301756019807778726946303745467320035156306939027976809895194379571
   15 --> 3872983346207416885179265399782399610832921705291590826587573766113483091936979033519287376858673517
   16 --> 4
   17 --> 4123105625617660549821409855974077025147199225373620434398633573094954346337621593587863650810684296
   18 --> 4242640687119285146405066172629094235709015626130844219530039213972197435386321116551162602982924718
   19 --> 4358898943540673552236981983859615659137003925232444936890344138159557328203158085656159155851944526
   20 --> 4472135954999579392818347337462552470881236719223051448541794490821041851275609798828828816757564549
   21 --> 4582575694955840006588047193728008488984456576767971902607242123906868425547770886604361559493445032
   22 --> 4690415759823429554565630113544466280588228353411737153605701891017024632753239721482115596061543135
   23 --> 4795831523312719541597438064162693919996707041904129346485309114448257235907464082492191446436918860
   24 --> 4898979485566356196394568149411782783931894961313340256865385134501920754914630053079718866209280469
   25 --> 5
   26 --> 5099019513592784830028224109022781989563770946099596407584970804425933632062224195588348851093932008
   27 --> 5196152422706631880582339024517617100828415761431141884167420938355799050726400111243438560271745727
   28 --> 5291502622129181181003231507278520851420518366164900360736668918402137646460567255520785772949087221
   29 --> 5385164807134504031250710491540329556295120161644788837680388670016645962827658692876633781679835484
   30 --> 5477225575051661134569697828008021339527446949979832542268944497324932771227227338008584361638706257
   31 --> 5567764362830021922119471298918549520476393377570414303968432585603589839254236292927218396184926678
   32 --> 5656854249492380195206754896838792314278687501507792292706718951962929913848428155401550137310566290
   33 --> 5744562646538028659850611468218929318220264457982792367699877470565900721457404627027125365596788122
   34 --> 5830951894845300470874152877545583076521398334885971954450006744867810061996712627665240326453035398
   35 --> 5916079783099616042567328291561617048415501230794340322879719669142822459105653036765752527183109178
   36 --> 6
   37 --> 6082762530298219688999684245202067062084970094786411186419153046486332725318910239803066427957848663
   38 --> 6164414002968976450250192381454244225235624023444574544874572072458399650263664212966729799198899945
   39 --> 6244997998398398205846893120939794461072959977991656308452971930609611200583514500633336112221340587
   40 --> 6324555320336758663997787088865437067439110278650433653715009705585188877278476442688496216758600590
   41 --> 6403124237432848686488217674621813264520420132621018885529272626668182758196876074289354302249869963
   42 --> 6480740698407860230965967436087996657705204307058346549711354397809617377844044371400360906605610235
   43 --> 6557438524302000652344109997636001627926966319883789769865460105585659853488575639355805290969678548
   44 --> 6633249580710799698229865473341373367854177091178707194117364292232969285218087693417686798256581301
   45 --> 6708203932499369089227521006193828706321855078834577172812691736231562776913414698243243225136346824
   46 --> 6782329983125268139064556326625969105195748323923288232750219582080728263987112589862640940936330044
   47 --> 6855654600401044124935871449084848960460643461001326275485108185678517115136816999227325148500066836
   48 --> 6928203230275509174109785366023489467771221015241522512223227917807732067635200148324584747028994302
   49 --> 7
   50 --> 7071067811865475244008443621048490392848359376884740365883398689953662392310535194251937671638207863
   51 --> 7141428428542849997999399811367265278766171159902733833208430882765820406440021886258988213532820418
   52 --> 7211102550927978586238442534940991892502593147690492425420906112454333896586020890409238164036981435
   53 --> 7280109889280518271097302491527032793777669682576477438378181791284115738624905183329579409080926752
   54 --> 7348469228349534294591852224117674175897842441970010385298077701752881132371945079619578299313920704
   55 --> 7416198487095662948711397440800713060979904319097501598732623264343830184313850242753009213195824943
   56 --> 7483314773547882771167497464633098603512039615557453892607490934640070312613878055953619790388759143
   57 --> 7549834435270749697236684806946117058222194704623380138298626905710721953917811195582452074147523972
   58 --> 7615773105863908285661411027158323005360705592546598468950484240520352157373001244642269714387151645
   59 --> 7681145747868608175769687021731372473062451077614883928024736483935541657992709851856047727961377799
   60 --> 7745966692414833770358530799564799221665843410583181653175147532226966183873958067038574753717347035
   61 --> 7810249675906654394129722735759101413568305136648563300177243760190785588936727054425433052267004895
   62 --> 7874007874011811019685034448812007863681086122020853794598842550313760846817698056926191351248746889
   63 --> 7937253933193771771504847260917781277130777549247350541105003377603206469690850883281178659423630831
   64 --> 8
   65 --> 8062257748298549652366613230303771131134396305608573387936592389263874951025688202960154266717230643
   66 --> 8124038404635960360459883568266040348504204086725312827651575594532916802840672694999157602947936877
   67 --> 8185352771872449969953703724733929458880486815498039963066715202723667614461097945343924671637868344
   68 --> 8246211251235321099642819711948154050294398450747240868797267146189908692675243187175727301621368593
   69 --> 8306623862918074852584262744907492010232214248955655779432188369037585033423151573867398508232357050
   70 --> 8366600265340755479781720257851874893928153692986721998111915430804187725943170098308147119649515361
   71 --> 8426149773176358630634139906202736031608002401560750013667811129327225502755203055485693537298969659
   72 --> 8485281374238570292810132345258188471418031252261688439060078427944394870772642233102325205965849436
   73 --> 8544003745317531167871648326239706434594455329533282241908651253771648819327298381080972030107009429
   74 --> 8602325267042626771729473535049713632027535557290735619508045641237426934663017012783330890698962064
   75 --> 8660254037844386467637231707529361834714026269051903140279034897259665084544000185405730933786242878
   76 --> 8717797887081347104473963967719231318274007850464889873780688276319114656406316171312318311703889053
   77 --> 8774964387392122060406388307416309560875876827554503590927695629782764646219306281675693157068705755
   78 --> 8831760866327846854764042726959253964174639480931417826210202972557139938235442840370435539414771517
   79 --> 8888194417315588850091441675408727817076450603729526298354720116376100599628599596023592952713630553
   80 --> 8944271909999158785636694674925104941762473438446102897083588981642083702551219597657657633515129099
   81 --> 9
   82 --> 9055385138137416626573808166984066413052124464096940276581741230018657980766059233384960678590990926
   83 --> 9110433579144298881945626104688669190099139168264955852496938465066021194283405665585341460929177246
   84 --> 9165151389911680013176094387456016977968913153535943805214484247813736851095541773208723118986890065
   85 --> 9219544457292887310002274281762793157246805048722464008007752205442671026801875460767894090793280564
   86 --> 9273618495495703752516416073990174626263468912076298213373826598328236836463843023232045857358474384
   87 --> 9327379053088815045554475542320556983276240694191654671056197298446784548807249678414220562911882016
   88 --> 9380831519646859109131260227088932561176456706823474307211403782034049265506479442964231192123086270
   89 --> 9433981132056603811320660377622640716983622633415121320662981448980022909585118058541026986890384104
   90 --> 9486832980505137995996680633298155601158665417975650480572514558377783315917714664032744325137900885
   91 --> 9539392014169456491526215860232265402546234252505457539081518529103625523056507218277821764491220698
   92 --> 9591663046625439083194876128325387839993414083808258692970618228896514471814928164984382892873837721
   93 --> 9643650760992954995760031047432663183906903693063252407300176887731286418668649722900054709293608591
   94 --> 9695359714832658028148881150845313393652150987954679590539717486233039867573300728483258678476917496
   95 --> 9746794344808963906838413199899600299252583900337491031991750005720081772460249356848712096038065527
   96 --> 9797958971132712392789136298823565567863789922626680513730770269003841509829260106159437732418560939
   97 --> 9848857801796104721746211414917624481696136287442764171723154529836440583707678630093200784115425762
   98 --> 9899494936611665341611821069467886549987703127638636512236758165935127349234749271952712740293491009
   99 --> 9949874371066199547344798210012060051781265636768060791176046438349453927827131540126530197384871952
  100 --> 10
 **/

#include <iostream>
#include <iomanip>
#include <string>

#include "gmpxx.h"


typedef unsigned int uint;


uint uint_sqrt(uint n)
{
  if (n == 0) {
    return 0;
  }
  else if (n < 4) {
    return 1;
  }
  uint cand_0, cand_1;
  cand_0 = uint_sqrt(n >> 2) << 1;
  cand_1 = cand_0 + 1;

  if (cand_1 * cand_1 > n) return cand_0;
  else return cand_1;
}


uint sum_digits(std::string str) {
  uint digits_sum = 0;
  for (std::string::size_type idx = 0; idx < str.size(); idx++) {
    digits_sum += (uint)(str[idx] - '0');
  }

  return digits_sum;
}


uint sum_digits(uint n) {
  uint digits_sum = 0;
  while (n > 0) {
    digits_sum += (n % 10);
    n /= 10;
  }

  return digits_sum;
}


int main()
{
  const uint num_digits = 100 - 1;  // all natural numbers under 100 have single-digit int root 
  const bool verbose = false;

  uint net_digits_sum = 0;
  uint int_sqrt_n, d;
  mpz_class remainder, sqrt, temp;
  for (uint n = 1; n <= 100; n++) {
    int_sqrt_n = uint_sqrt(n);
    if (n == int_sqrt_n * int_sqrt_n) {
      if (verbose) {
        std::cout << "[" << std::setw(3) << 0 << "] " 
                  << int_sqrt_n << std::setw(num_digits + 2) 
                  << 0 << std::endl;
      }
      std::cout << std::setw(3) << n << " --> " << int_sqrt_n << std::endl;
    }
    else {
      remainder = n - int_sqrt_n * int_sqrt_n;
      sqrt = int_sqrt_n;
      for (uint i = 1; i <= num_digits; i++) {
        if (verbose) {
          std::cout << "[" << std::setw(3) << i << "] " 
                    << sqrt << std::setw(num_digits + 2) 
                    << remainder << std::endl;
        }
        
        remainder = 100 * remainder;
        d = 9;
        temp = sqrt * (20 * d);
        temp = temp + (d * d);
        while (remainder < temp) { 
          d--; 
          temp = sqrt * (20 * d);
          temp = temp + (d * d);
        }
        remainder = remainder - temp;
        //
        sqrt = sqrt * 10;
        sqrt = sqrt + d;
      }
      net_digits_sum += sum_digits(sqrt.get_str(10));
      std::cout << std::setw(3) << n << " --> " << sqrt << std::endl;
    }
  }

  std::cout << "\nSum of digits: " << net_digits_sum << std::endl;

  return 0;
}
